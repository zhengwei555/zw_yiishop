<?php
/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2017/9/28
 * Time: 11:21
 */

namespace frontend\controllers;

use backend\models\Brand;
use backend\models\GoodsCategory;
use frontend\models\Address;
use frontend\models\LoginForm;
use frontend\models\Member;
use yii\web\Controller;
use yii\web\Response;

class ApiController extends Controller
{
    public $enableCsrfValidation = false;

    public function init()
    {
        \Yii::$app->response->format = Response::FORMAT_JSON;
        parent::init(); // TODO: Change the autogenerated stub
    }

    //用户注册
    public function actionMemberRegister()
    {
        $result = [
            'error' => true,
            'msg' => '',//错误信息
            'data' => [],//返回数据
        ];
        $request = \Yii::$app->request;
        if ($request->isPost) {
            $member = new Member();
            $member->load($request->post(), '');
            if ($member->validate()) {
                $member->save(false);
                $result['error'] = false;
                //提示注册成功
            } else {
                //提示注册失败信息
                $result['msg'] = $member->getErrors();
            }
        } else {
            $result['msg'] = '请求方式错误!';
        }

        return $result;
    }

    //用户登录
    public function actionMemberLogin()
    {
        $result = [
            'error' => true,
            'msg' => '',//错误信息
            'data' => [],//返回数据
        ];
        $request = \Yii::$app->request;
        $model = new LoginForm();
        if ($request->isPost) {
            $model->load($request->post(), '');
            if ($model->validate()) {
                //认证
                if ($model->Login()) {
                    //提示登录成功
                    $result['error'] = false;
                }
            } else {
                //提示登录失败信息
                $result['msg'] = $model->getErrors();
            }
        } else { //get传输
            $result['msg'] = '请求方式错误!';
        }
        return $result;
    }

    //修改密码
    public function actionMemberEdit()
    {
        $result = [
            'error' => true,
            'msg' => '',//错误信息
            'data' => [],//返回数据
        ];
        $request = \Yii::$app->request;
        if ($request->isPost) {  //post提交
            if (!\Yii::$app->user->isGuest) { //登录后才能修改密码
                $id = \Yii::$app->user->id;
                $model = Member::findOne(['id' => $id]);
                $model->load($request->post(), '');
                if ($model->validate()) { //验证通过
                    /*                    if(!\Yii::$app->security->validatePassword($model->password,$model->password_hash)){
                                          $model->addError('password','旧密码不正确');
                                        }*/
                    $model->password_hash = \Yii::$app->security->generatePasswordHash($model->password);
                    $model->save();
                    //提示登录成功
                    $result['error'] = false;

                } else { // 验证失败
                    //提示登录失败信息
                    $result['msg'] = $model->getErrors();
                }
            } else {//未登录
                $result['msg'] = '未登录!';
            }
        } else {  //get提交
            $result['msg'] = '请求方式错误!';
        }
        return $result;
    }
    //查看用户信息
    public function actionMemberIndex(){
        $result = [
            'error' => true,
            'msg' => '',//错误信息
            'data' => [],//返回数据
        ];
        if (!\Yii::$app->user->isGuest) { //登录后才能修改密码
            $id = \Yii::$app->user->id;
            $models = Member::find()->where(['id'=>$id])->all();
            $result['error'] = false;
            return $this->render('index', ['models' => $models]);
        }else{  //未登录
            $result['msg'] = '未登录!';
        }
        return $result;
    }

    //添加地址
    public function actionAddAddress()
    {
        $result = [
            'error' => true,
            'msg' => '',//错误信息
            'data' => [],//返回数据
        ];
        $model = new Address();
        $request = \Yii::$app->request;
        if ($request->isPost) {
            if (!\Yii::$app->user->isGuest) {
                $member_id = \Yii::$app->user->id;
                $model->load($request->post(), '');
                // var_dump($model);die;
                if ($model->validate()) {
                    $model->member_id = $member_id;
                    $model->save();
                    //提示添加成功
                    $result['error'] = false;
                } else {
                    //提示添加失败信息
                    $result['msg'] = $model->getErrors();
                }
            } else {//未登录
                $result['msg'] = '未登录!';
            }
        } else {//get提交
            $result['msg'] = '请求方式错误!';
        }
        return $result;
    }

    //修改地址
    public function actionEditAddress()
    {
        $result = [
            'error' => true,
            'msg' => '',//错误信息
            'data' => [],//返回数据
        ];
        $request = \Yii::$app->request;
        if ($request->isPost) {
            if (!\Yii::$app->user->isGuest) {
                $member_id = \Yii::$app->user->id;
                $model = Address::findOne(['id' => $member_id]);
                $model->load($request->post(), '');
                // var_dump($model);die;
                if ($model->validate()) {
                    $model->member_id = $member_id;
                    $model->save();
                    //提示添加成功
                    $result['error'] = false;
                } else {
                    //提示添加失败信息
                    $result['msg'] = $model->getErrors();
                }
            } else {//未登录
                $result['msg'] = '未登录!';
            }
        } else {//get提交
            $result['msg'] = '请求方式错误!';
        }
        return $result;
    }

    //地址列表
    public function actionIndexAddress()
    {
        $result = [
            'error' => true,
            'msg' => '',//错误信息
            'data' => [],//返回数据
        ];
        $model = new Address();
        if (!\Yii::$app->user->isGuest) {
            $member_id = \Yii::$app->user->id;
            $addressies = Address::find()->where(['member_id' => $member_id])->all();
        } else {
            $addressies = [];
        }
        $result['error'] = false;
        return $result;
        return $this->renderPartial('address', ['model' => $model, 'addressies' => $addressies]);
    }
    //删除地址
    public function actionDeleteAddress()
    {
        if (!\Yii::$app->user->isGuest) {  //登录
            $member_id = \Yii::$app->user->id;
            $model = Address::findOne(['member_id' => $member_id]);
            if ($model) {
                $model->delete();
                //提示添加成功
                $result['error'] = false;
            }else {
                //提示添加失败信息
                $result['msg'] = $model->getErrors();
            }
        } else {//未登录
            $result['msg'] = '未登录!';
        }
        return $result;
    }

    //商品分类
    public function actionGoodsIndex(){
        $result = [
            'error' => true,
            'msg' => '',//错误信息
            'data' => [],//返回数据
        ];
        $goodscategorys = GoodsCategory::find()->all();
        //  2  分配数据,调用视图
        $result['error'] = false;
        return $result;
        return $this->render('index', ['goodscategorys' => $goodscategorys]);
    }

    //获取子分类
    public function actionGoodsChildren($goods_id){
        $result = [
            'error' => true,
            'msg' => '',//错误信息
            'data' => [],//返回数据
        ];
        $goodscategory = GoodsCategory::findOne(['id' => $goods_id]);
        $models = GoodsCategory::find()->where(['>','lft',$goodscategory->lft])->andWhere(['<','rgt',$goodscategory->rgt])->all();

        //  2  分配数据,调用视图
        $result['error'] = false;
        return $result;
        return $this->render('index', ['models' => $models]);
    }

    //获取父分类
    public function actionGoodsParent($goods_id){
        $result = [
            'error' => true,
            'msg' => '',//错误信息
            'data' => [],//返回数据
        ];
        $goodscategory = GoodsCategory::findOne(['id' => $goods_id]);
        $models = GoodsCategory::find()->where(['<','lft',$goodscategory->lft])->andWhere(['>','rgt',$goodscategory->rgt])->all();

        //  2  分配数据,调用视图
        $result['error'] = false;
        return $result;
        return $this->render('index', ['models' => $models]);
    }


//      获取某分类下面的所有商品
    public function actionGoodsAll($goods_id){
        $result = [
            'error' => true,
            'msg' => '',//错误信息
            'data' => [],//返回数据
        ];
        $good = GoodsCategory::findOne(['id' => $goods_id]);
        $query = Goods::find();
        if ($good->depth == 2) {  //3及分类
            $query->andWhere(['goods_category_id' => $goods_id]);
        } else {
            $ids = $good->children()->select('id')->andWhere(['depth' => 2])->column();
            $query->andWhere(['in', 'goods_category_id', $ids]);
        }
        $result['error'] = false;
        return $result;
        $lists = $query->all();
        return $this->renderPartial('list', ['lists' => $lists]);
    }

    //-获取某品牌下面的所有商品
    public function actionBrandAll($goods_id){
        $result = [
            'error' => true,
            'msg' => '',//错误信息
            'data' => [],//返回数据
        ];
        $models = Goods::find()->where(['brand_id' => $goods_id])->all();
        $result['error'] = false;
        return $result;
        return $this->renderPartial('list', ['models' => $models]);
    }
}